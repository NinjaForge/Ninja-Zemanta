<?php
// $Id: zemanta.module,v 1.1.2.3 2008/09/20 23:23:27 rokZlender Exp $

/**
 * @file
 * Drupal module: Zemanta
 *
 * Adds connection to Zemanta service
 */

define(ZEMANTA_RELEASE_ID_URL, 'http://static.zemanta.com/plugins/drupal/release.txt');
define(ZEMANTA_LOADER_URL, 'http://static.zemanta.com/plugins/drupal/6.x/loader.js');
define(ZEMANTA_API_URL, 'http://api.zemanta.com/services/rest/0.0/');

function zemanta_help($section) {
  switch ($section) {
    case 'admin/settings/zemanta':
      return t("Zemanta integrates Zemanta's web service to make it easy to add contextual images, articles, links and tags to your post.");
  }
}

/**
 * Implementation of hook_menu().
 */
function zemanta_menu() {
  $items = array();

  $items['admin/settings/zemanta'] = array(
    'title' => t('Zemanta'),
    'description' => t('Configure Zemanta module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zemanta_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['zemanta/json-proxy'] = array(
    'title' => 'Json proxy',
    'page callback' => 'zemanta_json_proxy',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_admin_settings() for configuring the module
 */
function zemanta_admin() {
  zemanta_check_filter();
  if (!file_exists(zemanta_loader_path())) {
    zemanta_get_loader(ZEMANTA_LOADER_URL);
  }

  $node_types = array_map('check_plain', node_get_types('names'));
  $defaults = isset($node_types['blog']) ? array('blog' => 1) : array();
  $form['zemanta_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enable Zemanta for following content types'),
    '#default_value' => variable_get('zemanta_node_types', $defaults),
    '#options' => $node_types,
    '#description' => t('Select content types for which you want to enable Zemanta.'),
  );
  return system_settings_form($form);
}

function zemanta_enable() {
  if (!variable_get('zemanta_api_key',0)) {
    $api_key = zemanta_api_key_fetch();
    variable_set('zemanta_api_key', $api_key);
  }
  
  $release_id = zemanta_release_id_fetch();
  variable_set('zemanta_release_id', $release_id);
  zemanta_get_loader(ZEMANTA_LOADER_URL);
  drupal_set_message(t('Zemanta module was successfully enabled.'));
}

function zemanta_block($op = 'list', $delta = 0) {
  global $theme;
  if ($op == "list") {
    $block[0] = array(
       'info' => t('Zemanta'),
       'weight' => -9,
    );
    return $block;
  }
  else if ($op == 'view') {
    if (zemanta_show('add')) {
      $api_key = variable_get('zemanta_api_key', '');
      $release_id = variable_get('zemanta_release_id', 0);
      //$api_key_js = 'window.ZemantaGetAPIKey = function () { return "' . $api_key . '"; }';
      //drupal_add_js($api_key_js, 'inline');
      drupal_add_js(array('zemantaApiKey' => $api_key, 'zemantaReleaseID' => $release_id, 'zemantaCurrentTheme' => $theme), 'setting');
      drupal_add_js(zemanta_loader_path(), 'module');
      $block['content'] = '<div id="zemanta-sidebar">Loading Zemanta...</div>';
      return $block;
    }
    return;
  }
}

function zemanta_cron() {
  $current_release_id = variable_get('zemanta_release_id', 0);
  $new_release_id = zemanta_release_id_fetch();
  if ($current_release_id < $new_release_id || !file_exists(zemanta_loader_path())) {
    zemanta_get_loader(ZEMANTA_LOADER_URL);
    variable_set('zemanta_release_id', $new_release_id);
  }
}

function zemanta_api_key_fetch() {
  // Fetch API key used with Zemanta calls
  $api = '';
  $response = drupal_http_request(ZEMANTA_API_URL, array(), 'POST', 'method=zemanta.auth.create_user');

  // Parse returned result
  $matches = zem_reg_match( '/<status>(.+?)<\/status>/', $response->data);
  if ( 'ok' == $matches[1] ) {
    $matches = zem_reg_match( '/<apikey>(.+?)<\/apikey>/', $response->data);
    $api = $matches[1];
  }
  return $api;
}

function zemanta_release_id_fetch() {
  $response = drupal_http_request(ZEMANTA_RELEASE_ID_URL);
  if ($response->code == 200) {
    return trim($response->data);
  }
  return 0;
}

function zem_reg_match($rstr, $str) {
  // Make a regex match independantly of library available. Might work only
  // for simple cases like ours.
  if (function_exists('preg_match')) {
    preg_match( $rstr, $str, $matches );
  }
  elseif (function_exists('ereg')) {
    ereg( $rstr, $str, $matches );
  }
  else {
    $matches = array('', '');
  }
  return $matches;
}

/**
 * Shows zemanta block if we selected
 * proper node type on settings pages.
 * @param $op 'view' or 'add' depending on which page we want to include Zemanta
 */
function zemanta_show($op = 'add') {
  $node_types = variable_get('zemanta_node_types', array());
  
  if (arg(2) == 'edit' && is_numeric(arg(1))) {
    $type = db_result(db_query("SELECT type FROM {node} WHERE nid=%d",arg(1)));
  } 
  else {
    $type = arg(2);
  }
  
  if ($op == 'add') {
    if (arg(0) == 'node' && ((arg(1) == 'add') || (arg(2) == 'edit')) && in_array($type, $node_types, TRUE)) {
      return TRUE;
    }
  }
  else if ($op == 'view') {
    return TRUE;
  }
  return FALSE;
}

/**
 * JSON proxy helps us get around xss problems
 */
function zemanta_json_proxy() {

  foreach ($_POST as $key => $value) {
    $new_element = str_replace('&', '%26', $value);
    $new_element = str_replace(';', '%3B', $new_element);
    $postvars .= $key .'='. $new_element .'&';
  }

  $response = drupal_http_request(ZEMANTA_API_URL, array(), 'POST', $postvars);
  drupal_set_header('Content-Type: text/plain');
  echo $response->data;
}

/**
 * Checks if currently default filter is using filter html
 */
function zemanta_check_filter() {
  $needed_tags = array('fieldset', 'legend', 'h6', 'span', 'img', 'div', 'p');
  $default_input_format = filter_format_load(variable_get('filter_default_format', 1));
  $filters = filter_list_format($default_input_format->format);
  foreach ($filters as $id => $filter) {
    if ($filter->name == 'HTML filter') {
      $allowed_tags = preg_split('/\s+|<|>/', variable_get("allowed_html_". $default_input_format->format, '<a> <em> <strong> <cite> <code> <ul> <ol> <li> <dl> <dt> <dd>'), -1, PREG_SPLIT_NO_EMPTY);
      $diff = array_diff($needed_tags, $allowed_tags);
      if (!empty($diff)) {
        drupal_set_message(t('Your input filter currently removes tags that Zemanta needs to operate normally. Please add following tags to your input filter: %tags', array('%tags' => implode(', ', $diff))), 'warning');
      }
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Saves loader.js file locally
 * @param $url URL of the loader file to get
 * @return FALSE if get fails or filename if file was saved
 */
function zemanta_get_loader($url) {
  $directory = file_directory_path() .'/zemanta';
  $file_destination = $directory .'/'. basename($url);

  $result = drupal_http_request($url);
  if ($result->code == 200) {
    if (file_check_directory($directory, FILE_CREATE_DIRECTORY)) {
      return file_save_data($result->data, $directory .'/'. basename($url), FILE_EXISTS_REPLACE);
    }
  }
  else {
    watchdog('zemanta', t('Loader.js get returned error code @error', array('@error', $result->code)), WATCHDOG_ERROR);
  }
  return FALSE;
}

/**
 * Returns path to zemanta loader file
 * @return path to loader.js file
 */
function zemanta_loader_path() {
  return file_directory_path() .'/zemanta/loader.js';
}